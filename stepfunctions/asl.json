{
  "Comment": "Patch and Reboot Flow with Wait + Poll pattern and Retry",
  "StartAt": "FetchOSInfo",
  "States": {
    "FetchOSInfo": {
      "Type": "Task",
      "Resource": "arn:aws:lambda:us-east-1:982035845258:function:fetchOSInfoLambda",
      "Next": "ParseCVE",
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ]
    },
    "ParseCVE": {
      "Type": "Task",
      "Resource": "arn:aws:lambda:us-east-1:982035845258:function:parseCVELambda",
      "Next": "RunPatch",
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ]
    },
    "RunPatch": {
      "Type": "Task",
      "Resource": "arn:aws:lambda:us-east-1:982035845258:function:runPatchLambda",
      "Next": "PollCommandsMap",
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ]
    },
    "PollCommandsMap": {
      "Type": "Map",
      "ItemsPath": "$.results",
      "Iterator": {
        "StartAt": "Wait60s",
        "States": {
          "Wait60s": {
            "Type": "Wait",
            "Seconds": 60,
            "Next": "PollCommandStatus"
          },
          "PollCommandStatus": {
            "Type": "Task",
            "Resource": "arn:aws:lambda:us-east-1:982035845258:function:pollCommandStatusLambda",
            "Next": "CheckCommandStatus",
            "Retry": [
              {
                "ErrorEquals": [
                  "Lambda.ServiceException",
                  "Lambda.AWSLambdaException",
                  "Lambda.SdkClientException"
                ],
                "IntervalSeconds": 2,
                "MaxAttempts": 3,
                "BackoffRate": 2
              }
            ]
          },
          "CheckCommandStatus": {
            "Type": "Choice",
            "Choices": [
              {
                "Variable": "$.Status",
                "StringEquals": "Success",
                "Next": "Done"
              },
              {
                "Variable": "$.Status",
                "StringEquals": "Failed",
                "Next": "IteratorFailState"
              },
              {
                "Variable": "$.Status",
                "StringEquals": "InProgress",
                "Next": "Wait60s"
              }
            ],
            "Default": "IteratorFailState"
          },
          "Done": {
            "Type": "Pass",
            "End": true
          },
          "IteratorFailState": {
            "Type": "Fail",
            "Cause": "Patch command failed or status unknown in Map iterator"
          }
        }
      },
      "Next": "SaveResult"
    },
    "SaveResult": {
      "Type": "Task",
      "Resource": "arn:aws:lambda:us-east-1:982035845258:function:saveResultLambda",
      "Next": "CheckRebootRequired",
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ]
    },
    "CheckRebootRequired": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.results[0].RebootRequired",
          "BooleanEquals": true,
          "Next": "Reboot"
        }
      ],
      "Default": "Summarize"
    },
    "Reboot": {
      "Type": "Task",
      "Resource": "arn:aws:lambda:us-east-1:982035845258:function:rebootEC2Lambda",
      "Next": "Summarize",
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ]
    },
    "Summarize": {
      "Type": "Task",
      "Resource": "arn:aws:lambda:us-east-1:982035845258:function:summarizeLambda",
      "End": true,
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ]
    }
  }
}